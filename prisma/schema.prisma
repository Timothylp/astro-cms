// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Post {
  id        Int           @id @default(autoincrement())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  title     String
  slug      String        @unique
  sections  PostSection[]
  published Boolean       @default(false)
  author    User?         @relation(fields: [authorId], references: [id])
  authorId  Int?
}

model PostSection {
  id         Int          @id @default(autoincrement())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  section    Section?     @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  sectionId  Int?
  post       Post?        @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     Int?
  values FieldValue[]
}

model Section {
  id        Int           @id @default(autoincrement())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  title     String
  fields    Field[]
  posts     PostSection[]
}

model Field {
  id         Int          @id @default(autoincrement())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  key        String
  title      String
  type       String
  section   Section      @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  sectionId Int
  values FieldValue[]
}

model FieldValue {
  id        Int          @id @default(autoincrement())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  value     String
  field     Field?       @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  fieldId   Int?
  post      PostSection? @relation(fields: [postSectionId], references: [id], onDelete: Cascade)
  postSectionId    Int?
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
  posts Post[]
}