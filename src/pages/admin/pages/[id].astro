---
import type { PostSection } from "@prisma/client";
import Button from "../../../components/admin/Button.astro";
import IconCross from "../../../components/admin/icons/IconCross.astro";
import IconDelete from "../../../components/admin/icons/IconDelete.astro";
import { prisma } from "../../../db";
import AdminLayout from "../../../layouts/AdminLayout.astro";

const { id } = Astro.params;
if (!id) return Astro.redirect("/admin/pages");

let title = "Création d'une page";
let page = null;
let displaySections: any[] = []; // any temporaire

// Récupération des données de la page si elle existe
if (id !== "new") {
  page = await prisma.post.findUnique({
    where: {
      id: parseInt(id),
    },
  });
  if (!page) return Astro.redirect("/admin/pages");

  title = `Edition de la page ${page.title}`;
  const postSections: PostSection[] = await prisma.postSection.findMany({
    where: {
      postId: page.id,
    },
  });

  await Promise.all(
    postSections.map(async (postSection) => {
      const section = await prisma.section.findUnique({
        where: { id: postSection.sectionId },
      });

      const fields = await prisma.field.findMany({
        where: {
          sectionId: section?.id,
        },
      });

      const fieldValues = await prisma.fieldValue.findMany({
        where: {
          postSectionId: postSection.id,
        },
      });

      displaySections.push({
        id: postSection.id,
        sectionId: section?.id,
        title: section?.title,
        fields,
        fieldValues,
      });
    })
  );
}

// Traitement du formulaire
if (Astro.request.method === "POST") {
  const data = await Astro.request.formData();
  const title = data.get("title") as string;

  // Création ou édition de la page
  if (!page) {
    await prisma.post.create({
      data: {
        title,
        slug: title.toLowerCase().replace(/ /g, "-"),
      },
    });
  } else {
    await prisma.post.update({
      where: {
        id: page.id,
      },
      data: {
        title,
      },
    });

    const newSections = [];
    const transactions: any[] = []; // any temporaire

    let i = 0;
    while (data.get("sections[" + i + "][id]")) {
      const postSectionId = data.get("sections[" + i + "][id]") as string;
      const sectionId = data.get("sections[" + i + "][sectionId]") as string;

      const sectionFields = await prisma.field.findMany({
        where: {
          sectionId: parseInt(sectionId),
        },
      });

      await Promise.all(
        sectionFields.map(async (sectionField) => {
          const value = data.get("sections[" + i + "][fields][" + sectionField.id + "]") as string;

          const fieldValue = await prisma.fieldValue.findFirst({
            where: {
              field: {
                id: sectionField.id,
              },
              post: {
                id: parseInt(postSectionId),
              },
            },
          });

          newSections.push({
            id: postSectionId,
            sectionId: sectionId,
            fieldId: sectionField.id,
            fieldValue: fieldValue,
            value: value,
          });
        })
      );
      i++;
    }

    console.log(newSections);

    newSections.map((newSection) => {
      if (newSection.fieldValue) {
        transactions.push(
          prisma.fieldValue.update({
            where: {
              id: newSection.fieldValue.id,
            },
            data: {
              value: newSection.value,
            },
          })
        );
      } else {
        transactions.push(
          prisma.fieldValue.create({
            data: {
              value: newSection.value,
              fieldId: newSection.fieldId,
              postSectionId: parseInt(newSection.id),
            },
          })
        );
      }
    });

    await prisma.$transaction(transactions);
  }

  return Astro.redirect("/admin/pages");
}
---

<AdminLayout title={`${title}`}>
  <header class="p-3 sm:p-5">
    <a href="/admin/pages" class="group font-medium text-primary-600 dark:text-primary-500"
      >← <span class="group-hover:underline">Retour</span></a
    >
    <div class="flex items-center justify-between">
      <h1 class="mb-2 text-4xl font-bold tracking-tight text-gray-900 dark:text-white">{title}</h1>
      {page && <Button title="Voir la page" link={`/${page.slug}/`} type="see" />}
    </div>
  </header>
  <section class="p-3 sm:p-5">
    <div class="relative overflow-hidden bg-white shadow-md dark:bg-gray-800 sm:rounded-lg">
      <form class="p-4" method="post">
        <div class="mb-6">
          <input
            class="block w-full rounded-lg border border-gray-300 bg-gray-50 p-2 text-2xl text-gray-900 focus:border-primary-500 focus:ring-primary-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 dark:focus:border-primary-500 dark:focus:ring-primary-500"
            type="text"
            id="title"
            name="title"
            placeholder="Titre de la page"
            value={page && page.title}
            required
          />
          {page && <small class="mt-2 text-sm text-gray-500 dark:text-gray-400">slug : {page.slug}</small>}
        </div>
        <div class="mb-6">
          <p class="mb-2 block text-sm font-medium text-gray-900 dark:text-white">Liste des sections</p>
          <div id="sections">
            {
              displaySections &&
                displaySections.map((displaySection, index) => (
                  <>
                    <hr />
                    <div class="my-2 flex items-center justify-between">
                      <p class="block font-medium text-gray-900 dark:text-white">{displaySection.title}</p>
                      <button
                        type="button"
                        class="flex items-center justify-center rounded-lg border border-red-600/20 bg-red-400/10 p-2 text-red-400 transition-all duration-300 ease-in-out hover:border-red-600 hover:bg-red-400/20 hover:text-red-600">
                        <div class="h-5 w-5">
                          <IconDelete />
                        </div>
                      </button>
                    </div>

                    <div id={`section_${index}`} class="mb-2 flex flex-col gap-2 rounded-lg border border-gray-300 p-2">
                      <input id="id" type="hidden" name={`sections[${index}][id]`} value={displaySection.id} />
                      <input id="sectionId" type="hidden" name={`sections[${index}][sectionId]`} value={displaySection.sectionId} />
                      {displaySection.fields.map((field, indexField: number) => (
                        <div class="flex flex-col">
                          <label class="block text-sm font-medium text-gray-900 dark:text-white" for={field.title}>
                            {field.title}
                          </label>
                          {field.type === "textarea" && (
                            <textarea
                              class="focus:border-primary-500 focus:ring-primary-500 dark:focus:border-primary-500 dark:focus:ring-primary-500 block w-full rounded-lg border border-gray-300 bg-gray-50 p-2 text-sm text-gray-900 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400"
                              id={field.title}
                              name={`sections[${index}][fields][${field.id}]`}
                              placeholder={field.title}
                              rows="4"
                              required
                              set:text={displaySection?.fieldValues[indexField]?.value}
                              />
                          )}
                          {field.type === "text" && (
                            <input
                              class="focus:border-primary-500 focus:ring-primary-500 dark:focus:border-primary-500 dark:focus:ring-primary-500 block w-full rounded-lg border border-gray-300 bg-gray-50 p-2 text-sm text-gray-900 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400"
                              type="text"
                              id={field.title}
                              name={`sections[${index}][fields][${field.id}]`}
                              placeholder={field.title}
                              value={displaySection?.fieldValues[indexField]?.value}
                              required
                            />
                          )}
                        </div>
                      ))}
                    </div>
                  </>
                ))
            }
          </div>
          <button
            id="addField"
            type="button"
            class="flex w-full items-center justify-center border border-primary-600/20 bg-primary-400/10 p-2 text-primary-400 transition-all duration-300 ease-in-out hover:border-primary-600 hover:bg-primary-400/20 hover:text-primary-600">
            <div class="h-6 w-6"><IconCross /></div>
          </button>
        </div>
        <Button title="Enregistrer" type="submit" />
      </form>
    </div>
  </section>
</AdminLayout>
